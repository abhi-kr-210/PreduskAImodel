"use client";
import { useEffect, useRef, useState } from 'react';
import { ChatBubble } from '@/components/chat/ChatBubble';
import { FaCopy, FaDownload, FaPlus, FaSearch, FaBrain, FaRegLightbulb, FaGlobe, FaImage, FaBook, FaGraduationCap } from "react-icons/fa";
type Message = { id: string; role: 'user' | 'assistant'; content: string };
type Mode = { label: string; value: string; icon: JSX.Element };

const MODES: Mode[] = [
  { label: 'Web Search', value: 'web_search', icon: <FaGlobe className="inline mr-1" /> },
  { label: 'Deep Search', value: 'deep_search', icon: <FaBrain className="inline mr-1" /> },
  { label: 'Think Longer', value: 'think_longer', icon: <FaRegLightbulb className="inline mr-1" /> },
  
];

export function ChatArea() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const endRef = useRef<HTMLDivElement | null>(null);
  const [selectedMode, setSelectedMode] = useState<Mode>(MODES[0]!);
  const [showModeMenu, setShowModeMenu] = useState(false);
  const modeMenuRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages.length]);


  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (modeMenuRef.current && !modeMenuRef.current.contains(event.target as Node)) {
        setShowModeMenu(false);
      }
    };

    if (showModeMenu) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showModeMenu]);

  const send = async () => {
    if (!input.trim() || isLoading) return;
    
    const user: Message = { id: crypto.randomUUID(), role: 'user', content: input };
    setMessages((m) => [...m, user]);
    setInput('');
    setIsLoading(true);
    setShowModeMenu(false);
    
    setTimeout(() => {
      const assistant: Message = { 
        id: crypto.randomUUID(), 
        role: 'assistant', 
        content: `Mode: ${selectedMode.label}\n\nHere's a response to: "${user.content}"\n\nThis is a simulated AI response. In a real application, this would be generated by the selected AI model and mode based on your prompt and parameters.` 
      };
      setMessages((m) => [...m, assistant]);
      setIsLoading(false);
    }, 1000);
  };

  const copyLast = async () => {
    const last = [...messages].reverse().find((m) => m.role === 'assistant');
    if (!last) return;
    try {
      await navigator.clipboard.writeText(last.content);
      alert('Response copied to clipboard!');
    } catch {
      alert('Failed to copy response');
    }
  };

  const download = () => {
    if (messages.length === 0) {
      alert('No messages to download');
      return;
    }
    const blob = new Blob([JSON.stringify({ messages }, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-studio-chat-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const clearChat = () => {
    if (messages.length === 0) return;
    if (confirm('Are you sure you want to clear all messages?')) {
      setMessages([]);
    }
  };

  return (
    <div className="h-full flex flex-col bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm chat-interface">

      <div className="flex-shrink-0 px-4 sm:px-6 py-3 sm:py-4 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900/50">
        <div className="flex flex-col sm:flex-row-reverse items-end sm:items-center  gap-3 sm:gap-0">
          <div className="flex items-center gap-2 flex-wrap ">
            <button 
              className="px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600 transition-colors duration-200 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1 sm:gap-2" 
              onClick={copyLast} 
              aria-label="Copy last output"
              disabled={!messages.some(m => m.role === 'assistant')}
            >
              <FaCopy size={12} className="sm:w-3.5 sm:h-3.5" />
              <span className="hidden sm:inline">Copy</span>
            </button>
            <button 
              className="px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600 transition-colors duration-200 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1 sm:gap-2" 
              onClick={download} 
              aria-label="Download JSON"
              disabled={messages.length === 0}
            >
              <FaDownload size={12} className="sm:w-3.5 sm:h-3.5" />
              <span className="hidden sm:inline">Download</span>
            </button>
            {messages.length > 0 && (
              <button 
                className="px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 hover:bg-red-100 dark:hover:bg-red-900/30 rounded-lg border border-red-200 dark:border-red-800 transition-colors duration-200 focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 flex items-center gap-1 sm:gap-2" 
                onClick={clearChat}
                aria-label="Clear chat"
              >
                <span className="hidden sm:inline">Clear</span>
                <span className="sm:hidden">Ã—</span>
              </button>
            )}
          </div>
        </div>
      </div>


      <div className="flex-1 overflow-auto p-4 sm:p-6 space-y-4 bg-gray-50 dark:bg-gray-900/30 min-h-0 messages-area">
        {messages.length === 0 ? (
          <div className="flex flex-col items-center justify-center h-full text-center py-8 sm:py-12">
            <div className="w-12 h-12 sm:w-16 sm:h-16 bg-indigo-100 dark:bg-indigo-900/30 rounded-full flex items-center justify-center mb-4">
              <svg className="w-6 h-6 sm:w-8 sm:h-8 text-indigo-600 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
              </svg>
            </div>
            <h3 className="text-base sm:text-lg font-medium text-gray-900 dark:text-white mb-2">Start a conversation</h3>
            <p className="text-xs sm:text-sm text-gray-500 dark:text-gray-400 max-w-md px-4">
              Type your message below to begin chatting with the AI. You can select different modes and adjust parameters for customized responses.
            </p>
          </div>
        ) : (
          messages.map((m) => <ChatBubble key={m.id} role={m.role} content={m.content} />)
        )}
        {isLoading && (
          <div className="flex items-center gap-3 text-gray-500 dark:text-gray-400 p-3 sm:p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
            <div className="flex space-x-1">
              <div className="w-2 h-2 bg-indigo-500 rounded-full animate-bounce"></div>
              <div className="w-2 h-2 bg-indigo-500 rounded-full animate-bounce bounce-delay-1"></div>
              <div className="w-2 h-2 bg-indigo-500 rounded-full animate-bounce bounce-delay-2"></div>
            </div>
            <span className="text-xs sm:text-sm font-medium">AI is thinking...</span>
          </div>
        )}
        <div ref={endRef} />
      </div>

      <div className="flex-shrink-0 p-3 sm:p-4 md:p-6 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 input-area">
        <div className="flex flex-col gap-3">
         
          <div className="flex items-center gap-2 sm:gap-3 justify-center sm:justify-start">
            <div className="relative">
              <button
                className="flex items-center justify-center w-10 h-10 rounded-lg bg-indigo-100 dark:bg-indigo-900/30 hover:bg-indigo-200 dark:hover:bg-indigo-800 border border-indigo-300 dark:border-indigo-600 transition-colors duration-200 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                aria-label="Select mode"
                type="button"
                onClick={() => setShowModeMenu((v) => !v)}
              >
                <FaPlus size={16} className="text-indigo-600 dark:text-indigo-400" />
              </button>
              {showModeMenu && (
                <div className="absolute bottom-12 left-0 z-10 w-48 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg py-2 max-h-48 overflow-y-auto" ref={modeMenuRef}>
                  {MODES.map((mode) => (
                    <button
                      key={mode.value}
                      className={`flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-150 ${selectedMode.value === mode.value ? 'font-medium bg-indigo-50 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300' : ''}`}
                      onClick={() => { setSelectedMode(mode); setShowModeMenu(false); }}
                      aria-label={`Select ${mode.label} mode`}
                      type="button"
                    >
                      {mode.icon} {mode.label}
                    </button>
                  ))}
                </div>
              )}
            </div>
            
         
            <span className="flex items-center px-2 sm:px-3 py-2 rounded-lg bg-indigo-50 dark:bg-indigo-900/30 text-xs font-medium text-indigo-700 dark:text-indigo-300 border border-indigo-200 dark:border-indigo-800">
              {selectedMode.icon} <span className="ml-1">{selectedMode.label}</span>
            </span>
          </div>
          

        
          <div className="flex items-center gap-2 sm:gap-3">
     
            <div className="flex-1 relative">
              <input
                aria-label="Chat input"
                placeholder="Type your message here... (Press Enter to send)"
                className="w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 px-3 sm:px-4 py-2 sm:py-3 text-sm text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 dark:focus:ring-indigo-400 dark:focus:border-indigo-400 transition-colors duration-200"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); send(); } }}
                disabled={isLoading}
              />
            </div>
            

            <button 
              className="flex justify-center p-2 items-center text-sm font-medium text-white
               bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600 
               rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-indigo-500 
               focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50
               disabled:cursor-not-allowed  gap-2 flex-shrink-0 md:p-3" 
              onClick={send} 
              aria-label="Send message"
              disabled={!input.trim() || isLoading}
            >
              <img className="w-6 h-5" src="./send.png" alt="" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}


